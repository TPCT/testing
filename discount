import random
from time import strptime

"""
    :param day -> is string with whole date representation as %d/%m/%Y
    :param total -> is a decimal representation of the total money
    :return total discount, under certain condition:
        5% if 0 < total < 100
        10 if 100 < total < 500
        20 if total >= 500
        +10% on every Saturdays
    :exception ValueError, under certain conditions:
        on holidays (8/12, 25/12, 26/12), (27/12, 4/12, 11/12, 18/12) 
"""


def calculate_discount(day, total):
    if not isinstance(total, (int, float)):
        raise ValueError("The Discount can't be calculated in none decimal type")

    total = "%.2f" % total
    total = float(total)
    date = strptime(day, "%d/%m/%Y")

    day_of_the_week = date.tm_wday
    day_of_the_month = date.tm_mday
    month_of_the_year = date.tm_mon
    year_of_the_decade = date.tm_year

    total_discount = 0

    if ((day_of_the_month == 27 and month_of_the_year == 11) or (
            day_of_the_month in [8, 25, 26, 4, 11, 18] and month_of_the_year == 12)) and year_of_the_decade == 2022:
        raise ValueError("The Discount can't be calculated in holidays.")

    if total <= 0:
        raise ValueError("The Discount can't be calculated with zero total purchase.")

    if (day_of_the_month < 26 and month_of_the_year <= 11) or (day_of_the_month > 24 and month_of_the_year >= 12):
        return 0

    if day_of_the_week == 6:
        total_discount += 0.1

    if 0 < total < 100:
        total_discount += 0.05
    elif 100 <= total < 500:
        total_discount += 0.1
    else:
        total_discount += 0.2

    return total_discount


if __name__ == "__main__":
    # boundary values test cases
    print("[+] starting boundary conditions testing.")
    succeeded = 0
    failed = 0
    for date in ["26/11/2022", "27/11/2022", "4/12/2022", "11/12/2022", "18/12/2022", "8/12/2022", "25/12/2022",
                 "24/12/2022", "26/12/2022"]:
        for total in [0, 100, 500]:
            try:
                print("\t[+] testing at day %s, with total: %s" % (date, total))
                test_case = calculate_discount(date, total)
                print("\t[+] discount value: %s" % test_case)
                succeeded += 1
            except ValueError as e:
                print("\t[+] the function raised value error exception: %s" % e)
                failed += 1
    print(
        f"[+] boundary conditions testing:\n\t\t[+] success: {succeeded}/{succeeded + failed}\n\t\t[+]failed: {failed}/{failed + succeeded}")

    # partitioning testing
    print("[+] starting partitioning testing.")
    valid_dates_set1 = ["26/11/2022"]
    valid_dates_set2 = ["28/11/2022", "29/11/2022", "30/11/2022", "1/12/2022", "2/12/2022", "3/12/2022"]
    valid_dates_set3 = ["5/12/2022", "6/12/2022", "7/12/2022", "8/12/2022", "9/12/2022", "10/12/2022"]
    valid_dates_set4 = ["12/12/2022", "13/12/2022", "14/12/2022", "15/12/2022", "16/12/2022", "17/12/2022"]
    valid_dates_set5 = ["19/12/2022", "20/12/2022", "21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022"]
    invalid_dates_set1 = ["27/11/2022"]
    invalid_dates_set2 = ["4/12/2022"]
    invalid_dates_set3 = ["11/12/2022"]
    invalid_dates_set4 = ["18/12/2022"]
    invalid_dates_set5 = ["25/12/2022", "26/12/2022"]
    valid_totals_set1 = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    valid_totals_set2 = [110, 150, 200, 250, 300, 350, 400, 450, 500]
    valid_totals_set3 = [501, 510, 550, 1000, 2000, 3000, 4000, 5000, 6000]

    test_dates_case_sets = [valid_dates_set1, valid_dates_set2, valid_dates_set3, valid_dates_set4, valid_dates_set5,
                            invalid_dates_set1, invalid_dates_set2, invalid_dates_set3, invalid_dates_set4,
                            invalid_dates_set5]
    test_totals_case_sets = [valid_totals_set1, valid_totals_set2, valid_totals_set3]
    succeeded = 0
    failed = 0

    for test_date_case_set in test_dates_case_sets:
        for test_total_case_set in test_totals_case_sets:
            total = random.choice(test_total_case_set)
            date = random.choice(test_date_case_set)
            try:
                print("\t\t[+] testing at date: %s, with total: %s" % (total, date))
                discount = calculate_discount(date, total)
                succeeded += 1
                print("\t\t\t[+] discount value: %s" % discount)
            except ValueError as e:
                failed += 1
                print(f"\t\t\t[+] the function raised value error exception: {e}")
    print(
        f"[+] boundary conditions testing:\n\t\t[+] success: {succeeded}/{succeeded + failed}\n\t\t[+] failed: {failed}/{failed + succeeded}")
